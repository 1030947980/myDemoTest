server:
  port: 9090

spring:
  aop:
    proxy-target-class: true
  datasource:
    order:
      driver-class-name: com.mysql.jdbc.Driver
      minimum-idle: 50                  # 最小连接数
      maximum-pool-size: 50
      max-active: 50
      max-idle: 50 #最大空闲连接
      min-idle: 10 #最小空闲连接
      validation-query-timeout: 20
      log-validation-errors: true
      validation-interval: 60000 #避免过度验证，保证验证不超过这个频率——以毫秒为单位。如果一个连接应该被验证，但上次验证未达到指定间隔，将不再次验证。
      validation-query: SELECT 1 #SQL 查询， 用来验证从连接池取出的连接， 在将连接返回给调用者之前。 如果指定， 则查询必须是一个SQL SELECT 并且必须返回至少一行记录
      test-on-borrow: true #指明是否在从池中取出连接前进行检验， 如果检验失败， 则从池中去除连接并尝试取出另一个。注意： 设置为true 后如果要生效，validationQuery 参数必须设置为非空字符串
      test-on-return: true #指明是否在归还到池中前进行检验 注意： 设置为true 后如果要生效validationQuery 参数必须设置为非空字符串
      idle-timeout: 60000
      connection-test-query: SELECT 1
      num-tests-per-eviction-run: 50 #在每次空闲连接回收器线程(如果有)运行时检查的连接数量，最好和maxActive
      test-while-idle: true #指明连接是否被空闲连接回收器(如果有)进行检验，如果检测失败，则连接将被从池中去除
      min-evictable-idle-time-millis: 3600000 #连接池中连接，在时间段内一直空闲，被逐出连接池的时间(1000*60*60)，以毫秒为单位
      time-between-eviction-runs-millis: 300000 #在空闲连接回收器线程运行期间休眠的时间值,以毫秒为单位，一般比minEvictableIdleTimeMillis小
    hotel:
      driver-class-name: com.mysql.jdbc.Driver
      minimum-idle: 50                  # 最小连接数
      maximum-pool-size: 50
      max-active: 50
      max-idle: 50 #最大空闲连接
      min-idle: 10 #最小空闲连接
      validation-query-timeout: 20
      log-validation-errors: true
      validation-interval: 60000 #避免过度验证，保证验证不超过这个频率——以毫秒为单位。如果一个连接应该被验证，但上次验证未达到指定间隔，将不再次验证。
      validation-query: SELECT 1 #SQL 查询， 用来验证从连接池取出的连接， 在将连接返回给调用者之前。 如果指定， 则查询必须是一个SQL SELECT 并且必须返回至少一行记录
      test-on-borrow: true #指明是否在从池中取出连接前进行检验， 如果检验失败， 则从池中去除连接并尝试取出另一个。注意： 设置为true 后如果要生效，validationQuery 参数必须设置为非空字符串
      test-on-return: true #指明是否在归还到池中前进行检验 注意： 设置为true 后如果要生效validationQuery 参数必须设置为非空字符串
      idle-timeout: 60000
      connection-test-query: SELECT 1
      num-tests-per-eviction-run: 50 #在每次空闲连接回收器线程(如果有)运行时检查的连接数量，最好和maxActive
      test-while-idle: true #指明连接是否被空闲连接回收器(如果有)进行检验，如果检测失败，则连接将被从池中去除
      min-evictable-idle-time-millis: 3600000 #连接池中连接，在时间段内一直空闲，被逐出连接池的时间(1000*60*60)，以毫秒为单位
      time-between-eviction-runs-millis: 300000 #在空闲连接回收器线程运行期间休眠的时间值,以毫秒为
logging:
  level:
    com.example: debug
  pattern:
    dateformat: yyyy-MM-dd HH:mm:ss:SSS


#服务负载均衡规则
userservicenacos: #服务名称
  ribbon:
    NFLoadBalancerRuleClassName: com.alibaba.cloud.nacos.ribbon.NacosRule  # 负载均衡规则 优先本地集群然后随机

#配置饥饿加载
ribbon:
  eager-load:
    enabled: true # 开启饥饿加载 项目启动的时候就开启服务加载提示首次访问速度
    clients: userservicenacos # 指定对userservice这个服务饥饿加载
#      - userservice
#      - userservice
feign:
  client:
    config:
      default: # 这里用default就是全局配置，如果是写服务名称，则是针对某个微服务的配置,可通过代码配置
        loggerLevel: BASIC
  httpclient:
    enabled: true # 支持HttpClient的开关
    max-connections: 200 # 最大连接数
    max-connections-per-route: 50 # 单个路径的最大连接数
---
spring:
  profiles: localhost
  datasource:
    order:
      jdbc-url: jdbc:mysql://localhost:3306/cloud_order?useSSL=false
      username: root
      password: 123456
    hotel:
      jdbc-url: jdbc:mysql://localhost:3306/es_hotel?useSSL=false
      username: root
      password: 123456
  redis:
    host: 124.222.64.231
    port: 6379
    password: 123456
  rabbitmq:
    host: 124.222.64.231
    port: 5672
    virtual-host: /
    username: bing
    password: 123
    listener:
      simple:
        prefetch: 1 #每次只能去一个消息，消费后再获取下一个消息
es:
  host: http://124.222.64.231:9200
  user: elastic
  password: elastic
---
spring:
  profiles: prod
  datasource:
    order:
      jdbc-url: jdbc:mysql://124.222.64.231:3306/cloud_order?useSSL=false
      username: bing
      password: 'kPTtTxCNdWKfA2ms'
    hotel:
      jdbc-url: jdbc:mysql://124.222.64.231:3306/es_hotel?useSSL=false
      username: bing
      password: 'kPTtTxCNdWKfA2ms'
  redis:
    host: 124.222.64.231
    port: 6379
    password: 123456
  rabbitmq:
    host: 124.222.64.231
    port: 5672
    virtual-host: /
    username: bing
    password: 123
    listener:
      simple:
        prefetch: 1 #每次只能去一个消息，消费后再获取下一个消息
es:
  host: http://124.222.64.231:9200
  user: elastic
  password: elastic